1) PUBLIC_HEADER should include directory hierarchy.
2) project_system_processor values x86_64 and aarch64 are valid. Check amd64 and arm32. (lscpu)
3) project_system_package DEB is valid. Check other implementation for RPM etc. (/etc/os-release) maybe format .deb .rpm
4) error message valid parameters not hardcodded, message list
5) auto packaging
6) solve jni find problem in cross compile. it is difficult. Maybe a folder which includes jdk for cross
7) build gctest for multiple usage of the subprjects ?
8) Remove scope requirement from test? built-in PRIVATE?
9)
# This is required for auto packaging for system libraries like libc. Normally all test install works with find_rooth_path.
# For packaging dpkg search libc and c++ version to add .deb dependecy links.
# I dont understand why cpack tells rpath to dpkg info from CMakeLists.txt
# Try it with cmake's new version. Maybe Cpack tell rpath from find_root_path/lib like we have done below.
list(APPEND CMAKE_INSTALL_RPATH "${GCMAKE_CROSSCOMPILING_TOOLCHAIN_ROOT}/lib")