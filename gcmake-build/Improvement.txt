1) PUBLIC_HEADER should include directory hierarchy.
2) project_system_processor values x86_64 and aarch64 are valid. Check amd64 and arm32. (lscpu)
3) project_system_package DEB is valid. Check other implementation for RPM etc. (/etc/os-release) maybe format .deb .rpm
4) check cmake and interface compile options. Interface compile options must override cmake general options.
5) error message valid parameters not hardcodded, message list
6) auto packaging
7) solve jni find problem in cross compile. it is difficult. Maybe a folder which includes jdk for cross
8) ask user cmake build type
9) build gctest for multiple usage of the subprjects ?
10) Remove scope requirement from test? built-in PRIVATE?
11) install package multi target??
12) exact version or anynewer? note gctest and gcmake-build must be exact version
13) how to test cross compile ? shared library of gctest must be in qemu? or with parameters
14) add include directoy for executable. forexample microos and systemcall library. now only build interface supported. maybe later install into 
/usr/inc if got table vs. now include library is not validated but supported. find public headers for future.
Do we need target incl directory build source. it states in all functions.
15)
# This is required for auto packaging for system libraries like libc. Normally all test install works with find_rooth_path.
# For packaging dpkg search libc and c++ version to add .deb dependecy links.
# I dont understand why cpack tells rpath to dpkg info from CMakeLists.txt
# Try it with cmake's new version. Maybe Cpack tell rpath from find_root_path/lib like we have done below.
list(APPEND CMAKE_INSTALL_RPATH "${GCMAKE_CROSSCOMPILING_TOOLCHAIN_ROOT}/lib")
16) assembler-with-cpp added gm-kernel. maybe in default option by gcmake-build. think and why ? and in toolchain asm compiler
should be asm or gcc ? maybe add ne paramer asm compiler ask user.